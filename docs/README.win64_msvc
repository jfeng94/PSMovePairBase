Requirements
------------

- Visual Studio (either of these versions):
    - Community 2013 (http://www.visualstudio.com/en-us/news/vs2013-community-vs.aspx)
    - Community 2015 (https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx)
- CMake
  http://www.cmake.org/cmake/resources/software.html
- OpenCV
  http://sourceforge.net/projects/opencvlibrary/files/opencv-win/
- Git
  http://code.google.com/p/msysgit/

Preparing to build the PS Move API
---------------------------------------
  
1. Clone the PS Move API repository

   `git clone --recursive https://github.com/thp/psmoveapi.git`
   `cd psmoveapi`

Automatic build
------------------------
A build script is provided which will take care of the build for you. The script will generate the Visual Studio solution and build everything in Debug and Release.

Run from the commandline by:

		`cd psmoveapi`
VS2013: `call contrib/build_scripts/msvc/build_msvc_2013.bat`
VS2015: `call contrib/build_scripts/msvc/build_msvc_2015.bat`

Or browse to `psmoveapi/contrib/build_scripts/msvc/` in Explorer and double-click on `build_msvc_2013.bat` or `build_msvc_2015.bat` as desired.

The resulting binaries will be placed in `psmoveapi/build/[Debug/Release]`

Manual build
------------------------

1. Build libusb-1.0

   Open a command prompt in the libusb directory (psmoveapi\external\libusb-1.0)
   Run the following command:
   
   `git apply ..\..\contrib\msvc\libusb_dynamic_crt.patch`
   
   Open the correct solution:
       - VS2013: psmoveapi\external\libusb-1.0\msvc\libusb_2013.sln
       - VS2015: psmoveapi\external\libusb-1.0\msvc\libusb_2015.sln

   Change the target to Release or Debug (as desired) at the top of the Visual Studio window
   Right-click on libusb-1.0 (static) and Build
    
2. OpenCV (Optional -- only needed to build the positional tracker)

   In `psmoveapi/external`
   git clone --depth 1 --branch 3.1.0 git://github.com/Itseez/opencv.git
   `cd opencv`
   `mkdir build`
   `cd build`
   VS2013: `cmake .. -G "Visual Studio 12 Win64" -DBUILD_SHARED_LIBS=0 -DBUILD_WITH_STATIC_CRT=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_TESTS=OFF -DBUILD_DOCS=OFF -DBUILD_opencv_apps=OFF -DBUILD_opencv_flann=ON -DBUILD_opencv_features2d=ON -DBUILD_opencv_objdetect=OFF -DBUILD_opencv_photo=OFF -DBUILD_opencv_ts=OFF -DBUILD_opencv_ml=ON -DBUILD_opencv_video=OFF -DBUILD_opencv_java=OFF -DWITH_OPENEXR=OFF -DWITH_FFMPEG=OFF -DWITH_JASPER=OFF -DWITH_TIFF=OFF`
   VS2015: `cmake .. -G "Visual Studio 14 Win64" -DBUILD_SHARED_LIBS=0 -DBUILD_WITH_STATIC_CRT=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_TESTS=OFF -DBUILD_DOCS=OFF -DBUILD_opencv_apps=OFF -DBUILD_opencv_flann=ON -DBUILD_opencv_features2d=ON -DBUILD_opencv_objdetect=OFF -DBUILD_opencv_photo=OFF -DBUILD_opencv_ts=OFF -DBUILD_opencv_ml=ON -DBUILD_opencv_video=OFF -DBUILD_opencv_java=OFF -DWITH_OPENEXR=OFF -DWITH_FFMPEG=OFF -DWITH_JASPER=OFF -DWITH_TIFF=OFF`
   
   Open the solution in psmoveapi\external\opencv\build\OpenCV.sln
   Change the target to Release or Debug (as desired) at the top of the Visual Studio window
   Build the solution (Press F7).
    
3. SDL2 (Optional -- only needed to build the opengl examples)

   Still in `psmoveapi/external`
   `cd SDL2`
   
   For VS2015 only:
      `git apply ..\..\contrib\msvc\sdl_vs2015_libs.patch`
	
   `mkdir build`
   `cd build`
   VS2013: `cmake .. -G "Visual Studio 12 Win64" -DDIRECTX=OFF`
   VS2015: `cmake .. -G "Visual Studio 14 Win64" -DDIRECTX=OFF`
   
   Open the solution (psmoveapi\external\SDL2\build\SDL2.sln)
   
   Build the solution in Debug and Release as desired (Press F7). 

4. Build psmoveapi
   
   Still in the command prompt:
   
   `cd ..\..\..`
   `mkdir build `
   `cd build`
   VS2013: `cmake .. -G "Visual Studio 12 Win64" -DPSMOVE_USE_MADGWICK_AHRS=1 -DPSMOVE_USE_PS3EYE_DRIVER=1 -DPSMOVE_BUILD_OPENGL_EXAMPLES=1 -DPSMOVE_BUILD_TUIO_SERVER=ON -DOpenCV_DIR=./external/opencv/build/ -DSDL2DIR=./external/SDL2/` 
   VS2015: `cmake .. -G "Visual Studio 14 Win64" -DPSMOVE_USE_MADGWICK_AHRS=1 -DPSMOVE_USE_PS3EYE_DRIVER=1 -DPSMOVE_BUILD_OPENGL_EXAMPLES=1 -DPSMOVE_BUILD_TUIO_SERVER=ON -DOpenCV_DIR=./external/opencv/build/ -DSDL2DIR=./external/SDL2/`
   
   Open the `build\PSMoveAPI.sln` solution file.
   Change the target to Release or Debug as desired.
   Build the solution (Press F7).
   
5. Pairing the controller to the host
    
   Using the controllers' Bluetooth capabilities requires you to pair the
   controller to the host computer first. That is what the psmovepair utility
   is for. It is automatically built as part of the PS Move API.
   
   Make sure that Bluetooth is enabled on your computer, then connect a Move
   controller via USB and run
   
   psmovepair.exe
   
   to store the host's Bluetooth device address in the Move and register the
   controller. Follow the instructions on the screen until the Move's red
   status LED eventually remains lit to indicate a working Bluetooth
   connection. Since this step involves modifications of the registry on
   Windows 8 and later, you will probably have to run psmovepair.exe as
   Administrator.
   
   Note that the pairing step is necessary only once per controller. From that
   point on you can enable the Bluetooth connection simply by pressing the
   PS button. Only if you switched to a different Bluetooth adapter or deleted
   the controller from the list of Bluetooth devices you need to run
   psmovepair again for that controller.
 
6. Start one of the desired test applications

   If you previously chose to build the example applications (which is the
   default), you can then run
   
   example.exe
   
   for a basic example.

For questions, please read the archives of the PS Move Mailing List. If you
cannot find an answer to your question in the archives, send an e-mail:

https://groups.google.com/forum/#!aboutgroup/psmove
